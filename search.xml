<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/03/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>iOS 开发者技术路线图（2025 年）</title>
    <url>/2024/01/01/%E6%8A%80%E6%9C%AF%E8%B7%AF%E7%BA%BF%E5%9B%BE/</url>
    <content><![CDATA[<p>本文整理了iOS开发者所需掌握的核心技能和学习路径，帮助开发者规划职业发展。</p>
<span id="more"></span>

<hr>
<h2 id="🌟-基础能力"><a href="#🌟-基础能力" class="headerlink" title="🌟 基础能力"></a>🌟 基础能力</h2><h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1. 编程语言"></a>1. 编程语言</h3><ul>
<li><strong>Swift</strong><ul>
<li>掌握语法基础（变量、控制流、函数、闭包）</li>
<li>深入理解 <code>Optional</code>、泛型、协议、<code>async/await</code></li>
<li>学习 Swift Concurrency（<code>Task</code>、<code>Actor</code>、<code>Sendable</code>）</li>
</ul>
</li>
<li><strong>Objective-C（可选）</strong><ul>
<li>理解与 Swift 的混编机制</li>
<li>阅读遗留代码库的兼容性</li>
</ul>
</li>
</ul>
<h3 id="2-开发工具"><a href="#2-开发工具" class="headerlink" title="2. 开发工具"></a>2. 开发工具</h3><ul>
<li><strong>Xcode</strong><ul>
<li>熟练使用 Interface Builder、Storyboard&#x2F;XIB</li>
<li>掌握 LLDB 调试、Instruments 性能分析</li>
<li>熟悉 Swift Package Manager（SPM）依赖管理</li>
</ul>
</li>
<li><strong>终端工具</strong><ul>
<li>基础 Shell 命令（<code>xcodebuild</code>、<code>xcrun</code>）</li>
<li>Fastlane 自动化（构建、测试、发布）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🎨-UI-UX-开发"><a href="#🎨-UI-UX-开发" class="headerlink" title="🎨 UI&#x2F;UX 开发"></a>🎨 UI&#x2F;UX 开发</h2><h3 id="1-原生框架"><a href="#1-原生框架" class="headerlink" title="1. 原生框架"></a>1. 原生框架</h3><ul>
<li><strong>UIKit</strong><ul>
<li>Auto Layout 与自适应布局</li>
<li>核心组件（<code>UITableView</code>、<code>UICollectionView</code>）</li>
<li>自定义视图与动画（<code>CALayer</code>、<code>UIViewPropertyAnimator</code>）</li>
</ul>
</li>
<li><strong>SwiftUI</strong><ul>
<li>声明式语法与数据绑定（<code>@State</code>、<code>@Binding</code>）</li>
<li>复杂布局（<code>Grid</code>、<code>LazyVStack</code>）</li>
<li>跨平台适配（iOS&#x2F;macOS&#x2F;watchOS）</li>
</ul>
</li>
</ul>
<h3 id="2-设计规范"><a href="#2-设计规范" class="headerlink" title="2. 设计规范"></a>2. 设计规范</h3><ul>
<li><strong>Human Interface Guidelines</strong><ul>
<li>遵循 Apple 设计原则（交互、图标、动效）</li>
<li>适配不同设备尺寸（iPhone&#x2F;iPad&#x2F;折叠屏）</li>
<li>无障碍支持（VoiceOver、动态字体）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🔗-网络与数据"><a href="#🔗-网络与数据" class="headerlink" title="🔗 网络与数据"></a>🔗 网络与数据</h2><h3 id="1-网络请求"><a href="#1-网络请求" class="headerlink" title="1. 网络请求"></a>1. 网络请求</h3><ul>
<li><strong>URLSession</strong><ul>
<li>实现 RESTful API 调用（GET&#x2F;POST&#x2F;DELETE）</li>
<li>处理后台下载&#x2F;上传任务</li>
<li>优化缓存策略（<code>URLCache</code>、<code>NSURLCache</code>）</li>
</ul>
</li>
<li><strong>Alamofire（第三方库）</strong><ul>
<li>封装网络层（拦截器、请求重试）</li>
<li>结合 Combine&#x2F;Swift Concurrency</li>
</ul>
</li>
</ul>
<h3 id="2-数据存储"><a href="#2-数据存储" class="headerlink" title="2. 数据存储"></a>2. 数据存储</h3><ul>
<li><strong>Core Data</strong><ul>
<li>数据模型设计与版本迁移</li>
<li>性能优化（批量操作、预取）</li>
</ul>
</li>
<li><strong>SwiftData（推荐）</strong><ul>
<li>声明式数据管理（<code>@Model</code> 宏）</li>
<li>与 SwiftUI 深度集成</li>
</ul>
</li>
<li><strong>Realm&#x2F;GRDB（可选）</strong><ul>
<li>替代数据库方案对比</li>
</ul>
</li>
</ul>
<hr>
<h2 id="⚡-性能优化"><a href="#⚡-性能优化" class="headerlink" title="⚡ 性能优化"></a>⚡ 性能优化</h2><h3 id="1-关键指标"><a href="#1-关键指标" class="headerlink" title="1. 关键指标"></a>1. 关键指标</h3><ul>
<li><strong>启动时间优化</strong><ul>
<li>冷启动&#x2F;热启动分析</li>
<li>减少动态库加载（<code>dyld</code> 优化）</li>
</ul>
</li>
<li><strong>内存管理</strong><ul>
<li>检测循环引用（<code>weak</code>、<code>unowned</code>）</li>
<li>使用 Memory Graph Debugger</li>
</ul>
</li>
<li><strong>渲染性能</strong><ul>
<li>解决掉帧问题（<code>CADisplayLink</code> 监测）</li>
<li>离屏渲染优化（<code>cornerRadius</code> 替代方案）</li>
</ul>
</li>
</ul>
<h3 id="2-工具链"><a href="#2-工具链" class="headerlink" title="2. 工具链"></a>2. 工具链</h3><ul>
<li><strong>Instruments</strong><ul>
<li>Time Profiler 定位 CPU 瓶颈</li>
<li>Allocations 分析内存泄漏</li>
</ul>
</li>
<li><strong>Xcode Metrics</strong><ul>
<li>监控线上用户性能数据（电池、卡顿率）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🧪-测试与调试"><a href="#🧪-测试与调试" class="headerlink" title="🧪 测试与调试"></a>🧪 测试与调试</h2><h3 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1. 单元测试"></a>1. 单元测试</h3><ul>
<li><strong>XCTest 框架</strong><ul>
<li>编写可维护的测试用例</li>
<li>覆盖率分析（Xcode Coverage）</li>
</ul>
</li>
<li><strong>Snapshot Testing（第三方）</strong><ul>
<li>验证 UI 一致性（iOSSnapshotTestCase）</li>
</ul>
</li>
</ul>
<h3 id="2-调试技巧"><a href="#2-调试技巧" class="headerlink" title="2. 调试技巧"></a>2. 调试技巧</h3><ul>
<li><strong>断点高级用法</strong><ul>
<li>条件断点、符号断点</li>
<li>LLDB 命令（<code>po</code>、<code>expression</code>）</li>
</ul>
</li>
<li><strong>Proxyman&#x2F;Charles</strong><ul>
<li>抓包分析与 Mock 数据</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🏗️-架构设计"><a href="#🏗️-架构设计" class="headerlink" title="🏗️ 架构设计"></a>🏗️ 架构设计</h2><h3 id="1-主流模式"><a href="#1-主流模式" class="headerlink" title="1. 主流模式"></a>1. 主流模式</h3><ul>
<li><strong>MVVM</strong><ul>
<li>结合 Combine&#x2F;Swift Concurrency</li>
<li>双向数据绑定（<code>@Published</code>）</li>
</ul>
</li>
<li><strong>VIPER（复杂场景）</strong><ul>
<li>模块化拆分（Router&#x2F;Interactor）</li>
</ul>
</li>
<li><strong>TCA（The Composable Architecture）</strong><ul>
<li>状态管理（<code>Reducer</code>、<code>Store</code>）</li>
</ul>
</li>
</ul>
<h3 id="2-设计原则"><a href="#2-设计原则" class="headerlink" title="2. 设计原则"></a>2. 设计原则</h3><ul>
<li><strong>SOLID 原则</strong><ul>
<li>单一职责、依赖倒置</li>
</ul>
</li>
<li><strong>DI（依赖注入）</strong><ul>
<li>使用 Swinject&#x2F;Factory 框架</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🌐-跨平台技术"><a href="#🌐-跨平台技术" class="headerlink" title="🌐 跨平台技术"></a>🌐 跨平台技术</h2><h3 id="1-混合开发"><a href="#1-混合开发" class="headerlink" title="1. 混合开发"></a>1. 混合开发</h3><ul>
<li><strong>Flutter（推荐）</strong><ul>
<li>使用 Dart 构建跨端 UI</li>
<li>与原生模块通信（Platform Channel）</li>
</ul>
</li>
<li><strong>React Native（可选）</strong><ul>
<li>JavaScript 桥接原生能力</li>
</ul>
</li>
</ul>
<h3 id="2-苹果生态扩展"><a href="#2-苹果生态扩展" class="headerlink" title="2. 苹果生态扩展"></a>2. 苹果生态扩展</h3><ul>
<li><strong>watchOS&#x2F;tvOS</strong><ul>
<li>开发配套应用（HealthKit&#x2F;HomeKit）</li>
</ul>
</li>
<li><strong>CarPlay</strong><ul>
<li>车载系统适配指南</li>
</ul>
</li>
</ul>
<hr>
<h2 id="🚀-进阶领域"><a href="#🚀-进阶领域" class="headerlink" title="🚀 进阶领域"></a>🚀 进阶领域</h2><h3 id="1-新技术"><a href="#1-新技术" class="headerlink" title="1. 新技术"></a>1. 新技术</h3><ul>
<li><strong>AR&#x2F;VR</strong><ul>
<li>使用 ARKit 开发沉浸式体验</li>
</ul>
</li>
<li><strong>机器学习</strong><ul>
<li>Core ML 模型集成（图像分类、NLP）</li>
</ul>
</li>
<li><strong>Swift 编译器插件</strong><ul>
<li>自定义宏（<code>@freestanding</code>、<code>@attached</code>）</li>
</ul>
</li>
</ul>
<h3 id="2-工程化"><a href="#2-工程化" class="headerlink" title="2. 工程化"></a>2. 工程化</h3><ul>
<li><strong>CI&#x2F;CD</strong><ul>
<li>GitHub Actions&#x2F;Bitrise 流水线搭建</li>
<li>TestFlight 分发与管理</li>
</ul>
</li>
<li><strong>App Store 上架</strong><ul>
<li>审核避坑指南（隐私政策、元数据）</li>
</ul>
</li>
</ul>
<hr>
<h2 id="📚-持续学习"><a href="#📚-持续学习" class="headerlink" title="📚 持续学习"></a>📚 持续学习</h2><h3 id="1-资源推荐"><a href="#1-资源推荐" class="headerlink" title="1. 资源推荐"></a>1. 资源推荐</h3><ul>
<li><strong>官方文档</strong><ul>
<li><a href="https://developer.apple.com/">Apple Developer</a></li>
<li>WWDC 视频（年度新技术解析）</li>
</ul>
</li>
<li><strong>书籍</strong><ul>
<li>《Swift 进阶》</li>
<li>《Combine 异步编程》</li>
</ul>
</li>
<li><strong>社区</strong><ul>
<li>Swift 论坛、iOS Dev Weekly</li>
</ul>
</li>
</ul>
<h3 id="2-实践建议"><a href="#2-实践建议" class="headerlink" title="2. 实践建议"></a>2. 实践建议</h3><ul>
<li><strong>开源贡献</strong><ul>
<li>Alamofire&#x2F;SwiftUI 源码阅读</li>
</ul>
</li>
<li><strong>个人项目</strong><ul>
<li>开发完整上架应用（从 0 到 1 闭环）</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><strong>提示</strong>：技术路线需根据个人目标动态调整，建议每半年复盘一次技能树 🎯</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>职业发展</tag>
        <tag>学习路径</tag>
      </tags>
  </entry>
  <entry>
    <title>常见算法考题列表（2025 年整理）</title>
    <url>/2024/01/01/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>本文整理了常见的算法面试题目，包括数据结构、基础算法和高级算法等多个方面的典型题目。</p>
<span id="more"></span>

<hr>
<h2 id="📚-数据结构与基础算法"><a href="#📚-数据结构与基础算法" class="headerlink" title="📚 数据结构与基础算法"></a>📚 <strong>数据结构与基础算法</strong></h2><h3 id="1-数组与链表"><a href="#1-数组与链表" class="headerlink" title="1. 数组与链表"></a>1. <strong>数组与链表</strong></h3><ul>
<li><strong>两数之和</strong>题目：在数组中找出和为 <code>target</code> 的两个元素的下标。考察点：哈希表、空间换时间优化:cite[3]:cite[7]</li>
<li><strong>合并两个有序链表</strong>题目：将两个升序链表合并为一个新链表。考察点：指针操作、递归&#x2F;迭代实现:cite[3]:cite[7]</li>
<li><strong>反转链表</strong><br>题目：将单链表反转（迭代或递归实现）。<br>考察点：指针操作、递归思维:cite[2]:cite[7]</li>
</ul>
<h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. <strong>字符串</strong></h3><ul>
<li><strong>最长回文子串</strong>题目：找到字符串中的最长回文子串。考察点：中心扩散法、动态规划:cite[2]:cite[7]</li>
<li><strong>第一个不重复的字符</strong>题目：找到字符串中第一个只出现一次的字符的下标。考察点：哈希表统计频率:cite[7]</li>
<li><strong>版本号排序</strong><br>题目：将版本号数组按从大到小排序（如 <code>[&#39;10.2.1&#39;, &#39;0.402.1&#39;]</code>）。<br>考察点：字符串分割、多级比较:cite[7]</li>
</ul>
<h3 id="3-树与图"><a href="#3-树与图" class="headerlink" title="3. 树与图"></a>3. <strong>树与图</strong></h3><ul>
<li><strong>对称二叉树</strong>题目：判断二叉树是否镜像对称。考察点：递归遍历、层序遍历:cite[3]:cite[7]</li>
<li><strong>二叉树的中序遍历</strong>题目：实现非递归中序遍历。考察点：栈的应用、Morris 遍历:cite[2]:cite[7]</li>
<li><strong>克隆图</strong><br>题目：深度拷贝无向连通图。<br>考察点：DFS&#x2F;BFS、哈希表记录已访问节点:cite[3]</li>
</ul>
<hr>
<h2 id="⚙️-高级算法与优化"><a href="#⚙️-高级算法与优化" class="headerlink" title="⚙️ 高级算法与优化"></a>⚙️ <strong>高级算法与优化</strong></h2><h3 id="1-排序与搜索"><a href="#1-排序与搜索" class="headerlink" title="1. 排序与搜索"></a>1. <strong>排序与搜索</strong></h3><ul>
<li><strong>快速排序</strong>题目：实现快速排序并分析时间复杂度。考察点：分治思想、基准选择优化:cite[1]:cite[7]</li>
<li><strong>二分查找</strong>题目：在有序数组中查找目标值的位置。考察点：边界条件处理、循环不变量:cite[1]:cite[7]</li>
<li><strong>第 K 个最大元素</strong><br>题目：在未排序数组中找到第 K 大的元素。<br>考察点：快速选择算法、堆排序:cite[3]</li>
</ul>
<h3 id="2-动态规划"><a href="#2-动态规划" class="headerlink" title="2. 动态规划"></a>2. <strong>动态规划</strong></h3><ul>
<li><strong>最长递增子序列</strong>题目：求数组中最长严格递增子序列的长度。考察点：状态转移方程、二分优化:cite[3]:cite[7]</li>
<li><strong>背包问题</strong>题目：0-1 背包问题的动态规划解法。考察点：二维 DP 表、空间压缩:cite[4]:cite[8]</li>
<li><strong>编辑距离</strong><br>题目：计算将字符串 A 转换为 B 的最小操作次数（增&#x2F;删&#x2F;改）。<br>考察点：二维 DP、状态转移方程:cite[7]</li>
</ul>
<h3 id="3-贪心与回溯"><a href="#3-贪心与回溯" class="headerlink" title="3. 贪心与回溯"></a>3. <strong>贪心与回溯</strong></h3><ul>
<li><strong>跳跃游戏</strong>题目：判断能否从数组起点跳到终点（每步最大跳跃长度为 <code>nums[i]</code>）。考察点：贪心策略、最大覆盖范围:cite[7]</li>
<li><strong>全排列</strong>题目：生成数组的所有排列组合。考察点：回溯算法、剪枝优化:cite[7]</li>
<li><strong>组合总和</strong><br>题目：找出数组中所有和为 <code>target</code> 的组合（元素可重复使用）。<br>考察点：回溯、去重技巧:cite[7]</li>
</ul>
<hr>
<h2 id="🧩-系统设计与场景题"><a href="#🧩-系统设计与场景题" class="headerlink" title="🧩 系统设计与场景题"></a>🧩 <strong>系统设计与场景题</strong></h2><h3 id="1-数据结构设计"><a href="#1-数据结构设计" class="headerlink" title="1. 数据结构设计"></a>1. <strong>数据结构设计</strong></h3><ul>
<li><strong>LRU 缓存</strong>题目：设计基于 LRU 策略的缓存，支持 <code>get</code> 和 <code>put</code> 操作。考察点：哈希表 + 双向链表:cite[2]:cite[7]</li>
<li><strong>最小栈</strong><br>题目：实现一个支持 <code>push</code>、<code>pop</code>、<code>top</code> 及 <code>getMin</code> 的栈。<br>考察点：辅助栈或差值存储:cite[3]</li>
</ul>
<h3 id="2-场景问题"><a href="#2-场景问题" class="headerlink" title="2. 场景问题"></a>2. <strong>场景问题</strong></h3><ul>
<li><strong>会议室安排</strong>题目：给定多个会议时间区间，判断能否全部安排。考察点：区间排序、重叠检测:cite[7]</li>
<li><strong>接雨水</strong><br>题目：计算柱子高度数组能接多少雨水。<br>考察点：双指针、动态规划或单调栈:cite[7]</li>
</ul>
<hr>
<h2 id="📈-复杂度与优化"><a href="#📈-复杂度与优化" class="headerlink" title="📈 复杂度与优化"></a>📈 <strong>复杂度与优化</strong></h2><ul>
<li><strong>时间复杂度分析</strong>常见阶：O(1)、O(n)、O(n²)、O(nlogn) 等，需结合代码解释:cite[4]:cite[8]</li>
<li><strong>空间复杂度优化</strong><br>例如：原地排序、滚动数组、位运算压缩状态:cite[4]:cite[7]</li>
</ul>
<hr>
<blockquote>
<p><strong>提示</strong>：以上题目覆盖了算法面试 80% 的高频考点，建议结合 LeetCode 或《剑指 Offer》进行针对性练习。<br><strong>完整题目与代码实现</strong>可参考：<a href="https://blog.csdn.net/Ed7zgeE9X/article/details/132288312">CSDN 算法题整理</a>:cite[7] | <a href="https://leetcode.com/">力扣题库</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>面试</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 面试高频问题总结（2025 最新版）</title>
    <url>/2024/01/01/%E9%AB%98%E9%A2%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>本文总结了iOS开发面试中的高频问题，涵盖语言基础、框架应用、性能优化等多个方面。</p>
<span id="more"></span>

<hr>
<h2 id="🎯-语言基础（Swift）"><a href="#🎯-语言基础（Swift）" class="headerlink" title="🎯 语言基础（Swift）"></a>🎯 语言基础（Swift）</h2><ol>
<li><p><strong>值类型 vs 引用类型</strong></p>
<ul>
<li>结构体&#x2F;枚举与类的本质区别？</li>
<li>如何选择 <code>struct</code> 和 <code>class</code> 的使用场景？</li>
</ul>
</li>
<li><p><strong>协议与泛型</strong></p>
<ul>
<li><code>associatedtype</code> 的作用是什么？</li>
<li>如何实现类型擦除（Type Erasure）？</li>
</ul>
</li>
<li><p><strong>内存管理</strong></p>
<ul>
<li>解释 <code>weak</code>、<code>unowned</code>、<code>strong</code> 的区别</li>
<li>如何检测和解决循环引用问题？</li>
</ul>
</li>
<li><p><strong>Swift Concurrency</strong></p>
<ul>
<li><code>async/await</code> 与 Combine 框架的适用场景对比</li>
<li><code>Sendable</code> 协议的作用与实现要求</li>
</ul>
</li>
</ol>
<hr>
<h2 id="🖥️-iOS-框架"><a href="#🖥️-iOS-框架" class="headerlink" title="🖥️ iOS 框架"></a>🖥️ iOS 框架</h2><h3 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a>UIKit</h3><ol>
<li><p><strong>生命周期</strong></p>
<ul>
<li><code>viewDidLoad</code> 和 <code>viewWillAppear</code> 的区别</li>
<li>如何正确管理视图控制器的内存？</li>
</ul>
</li>
<li><p><strong>布局与渲染</strong></p>
<ul>
<li>Auto Layout 性能优化技巧</li>
<li>解释 <code>drawRect</code> 与 <code>layoutSubviews</code> 的调用时机</li>
</ul>
</li>
<li><p><strong>响应链与手势</strong></p>
<ul>
<li>描述 iOS 事件传递机制（Hit-Testing）</li>
<li>如何实现自定义手势识别器？</li>
</ul>
</li>
</ol>
<h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><ol>
<li><p><strong>状态管理</strong></p>
<ul>
<li><code>@State</code>、<code>@Binding</code>、<code>@ObservedObject</code> 的区别</li>
<li>如何实现跨视图状态共享？</li>
</ul>
</li>
<li><p><strong>性能优化</strong></p>
<ul>
<li><code>LazyVStack</code> 与 <code>VStack</code> 的性能差异</li>
<li>如何避免 SwiftUI 视图的无效重绘？</li>
</ul>
</li>
</ol>
<hr>
<h2 id="💡-设计模式与架构"><a href="#💡-设计模式与架构" class="headerlink" title="💡 设计模式与架构"></a>💡 设计模式与架构</h2><ol>
<li><p><strong>MVVM 实现</strong></p>
<ul>
<li>如何设计双向数据绑定（结合 Combine&#x2F;Swift Concurrency）？</li>
<li>ViewModel 与 Service 层的职责划分</li>
</ul>
</li>
<li><p><strong>依赖注入</strong></p>
<ul>
<li>手动依赖注入 vs 框架（如 Swinject）的优劣</li>
<li>如何在单元测试中应用 DI？</li>
</ul>
</li>
<li><p><strong>模块化设计</strong></p>
<ul>
<li>如何解耦巨型单体工程？</li>
<li>动态化方案（二进制化&#x2F;插件化）的实现思路</li>
</ul>
</li>
</ol>
<hr>
<h2 id="⚙️-性能优化"><a href="#⚙️-性能优化" class="headerlink" title="⚙️ 性能优化"></a>⚙️ 性能优化</h2><ol>
<li><p><strong>启动优化</strong></p>
<ul>
<li>冷启动阶段各进程的加载顺序</li>
<li>如何减少动态库加载时间？</li>
</ul>
</li>
<li><p><strong>内存优化</strong></p>
<ul>
<li>使用 Instruments 定位内存泄漏的步骤</li>
<li><code>NSCache</code> 与 <code>URLCache</code> 的最佳实践</li>
</ul>
</li>
<li><p><strong>渲染性能</strong></p>
<ul>
<li>如何检测和解决掉帧问题？</li>
<li>离屏渲染的常见场景与优化方案</li>
</ul>
</li>
</ol>
<hr>
<h2 id="🌐-网络与存储"><a href="#🌐-网络与存储" class="headerlink" title="🌐 网络与存储"></a>🌐 网络与存储</h2><ol>
<li><p><strong>HTTP&#x2F;2 与 QUIC</strong></p>
<ul>
<li>对比 HTTP&#x2F;1.1 的核心改进点</li>
<li>iOS 如何支持 QUIC 协议？</li>
</ul>
</li>
<li><p><strong>数据持久化</strong></p>
<ul>
<li>Core Data 与 SwiftData 的架构差异</li>
<li>多线程环境下 Realm 的使用注意事项</li>
</ul>
</li>
<li><p><strong>安全机制</strong></p>
<ul>
<li>如何防止中间人攻击（MITM）？</li>
<li>Keychain 数据存储的加密原理</li>
</ul>
</li>
</ol>
<hr>
<h2 id="🔄-多线程与并发"><a href="#🔄-多线程与并发" class="headerlink" title="🔄 多线程与并发"></a>🔄 多线程与并发</h2><ol>
<li><p><strong>GCD 高级用法</strong></p>
<ul>
<li><code>dispatch_barrier_async</code> 的应用场景</li>
<li>如何创建可取消的 DispatchWorkItem？</li>
</ul>
</li>
<li><p><strong>OperationQueue</strong></p>
<ul>
<li>如何实现任务依赖与优先级控制？</li>
<li>对比 GCD 的优劣</li>
</ul>
</li>
<li><p><strong>Actor 模型</strong></p>
<ul>
<li>Swift Actor 如何保证线程安全？</li>
<li><code>nonisolated</code> 关键字的用途</li>
</ul>
</li>
</ol>
<hr>
<h2 id="🧪-测试与调试"><a href="#🧪-测试与调试" class="headerlink" title="🧪 测试与调试"></a>🧪 测试与调试</h2><ol>
<li><p><strong>单元测试</strong></p>
<ul>
<li>如何对异步代码进行测试？</li>
<li>依赖注入在测试中的应用</li>
</ul>
</li>
<li><p><strong>UI 自动化</strong></p>
<ul>
<li>XCUITest 的核心组件与使用限制</li>
<li>如何实现跨语言自动化测试（Appium）</li>
</ul>
</li>
<li><p><strong>Crash 分析</strong></p>
<ul>
<li>符号化崩溃日志的完整流程</li>
<li>如何捕获并上报野指针异常？</li>
</ul>
</li>
</ol>
<hr>
<h2 id="🧠-系统设计题"><a href="#🧠-系统设计题" class="headerlink" title="🧠 系统设计题"></a>🧠 系统设计题</h2><ol>
<li><p><strong>架构设计</strong></p>
<ul>
<li>设计一个支持 LRU 缓存的图片加载库</li>
<li>实现一个支持断点续传的下载管理器</li>
</ul>
</li>
<li><p><strong>场景方案</strong></p>
<ul>
<li>如何保证弱网环境下消息的可靠传输？</li>
<li>设计一个即时通讯应用的消息同步机制</li>
</ul>
</li>
</ol>
<hr>
<h2 id="💻-算法与数据结构"><a href="#💻-算法与数据结构" class="headerlink" title="💻 算法与数据结构"></a>💻 算法与数据结构</h2><ol>
<li><p><strong>高频算法</strong></p>
<ul>
<li>链表反转（迭代&#x2F;递归）</li>
<li>二叉树层序遍历</li>
<li>最长无重复子串</li>
</ul>
</li>
<li><p><strong>优化思维</strong></p>
<ul>
<li>两数之和的多种解法对比（哈希表&#x2F;双指针）</li>
<li>动态规划解决背包问题</li>
</ul>
</li>
</ol>
<hr>
<blockquote>
<p><strong>提示</strong>：每个问题建议延伸思考：</p>
<ul>
<li>该技术点的底层原理（如 Runtime 机制）</li>
<li>实际项目中的实践案例</li>
<li>不同方案的优缺点对比</li>
</ul>
</blockquote>
<p><strong>注</strong>：结合最新 iOS 19 特性（如 Vision Pro 开发）准备差异化答案 🚀</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>面试</tag>
        <tag>知识点</tag>
      </tags>
  </entry>
</search>
